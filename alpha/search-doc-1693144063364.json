[{"title":"CommandContext","type":0,"sectionRef":"#","url":"/Cmdr/alpha/api/CommandContext","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CommandContext","url":"/Cmdr/alpha/api/CommandContext#types","content":" "},{"title":"CommandArgument​","type":1,"pageTitle":"CommandContext","url":"/Cmdr/alpha/api/CommandContext#CommandArgument","content":"&lt;/&gt; interface CommandArgument { Placeholder: string } TODO: "},{"title":"Commands","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/commands","content":"Commands","keywords":""},{"title":"ArgumentContext","type":0,"sectionRef":"#","url":"/Cmdr/alpha/api/ArgumentContext","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#types","content":" "},{"title":"ArgumentDefinition​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#ArgumentDefinition","content":"&lt;/&gt; interface ArgumentDefinition { Placeholder: string } TODO: "},{"title":"Properties​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#properties","content":" "},{"title":"Command​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#Command","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.Command: CommandContext The command that this argument belongs to.  "},{"title":"Type​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#Type","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.Type: TypeDefinition The type definition for this argument.  "},{"title":"Name​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.Name: string The name of this argument.  "},{"title":"Object​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#Object","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.Object: ArgumentDefinition The raw argument definition.  "},{"title":"Required​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#Required","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.Required: boolean Whether or not this argument was required.  "},{"title":"Executor​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#Executor","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.Executor: Player  The player that ran the command that this argument belongs to.  "},{"title":"RawValue​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#RawValue","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.RawValue: string The raw, unparsed value for this argument.  "},{"title":"RawSegments​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#RawSegments","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.RawSegments: {string} An array of strings representing the values in a comma-separated list, if applicable.  "},{"title":"Prefix​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#Prefix","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ArgumentContext.Prefix: string The prefix used in this argument (like % in %Team). Empty string if no prefix was used. See Prefixed Union Types for more details. "},{"title":"Functions​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#functions","content":" "},{"title":"GetTransformedValue​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#GetTransformedValue","content":"&lt;/&gt; ArgumentContext:GetTransformedValue(segment: number) → ...any Returns the transformed value from this argument, see Types.  "},{"title":"GetValue​","type":1,"pageTitle":"ArgumentContext","url":"/Cmdr/alpha/api/ArgumentContext#GetValue","content":"&lt;/&gt; ArgumentContext:GetValue() → any Returns the parsed (final) value for this argument. "},{"title":"Placeholder","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/advanced/placeholder","content":"Placeholder","keywords":""},{"title":"Cookbook","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/community/cookbook","content":"Cookbook","keywords":""},{"title":"Util","type":0,"sectionRef":"#","url":"/Cmdr/alpha/api/Util","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#functions","content":" "},{"title":"MakeDictionary​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#MakeDictionary","content":"&lt;/&gt; Util.MakeDictionary(array: {any}) → {[any]: true} Takes an array and flips its values into dictionary keys with value of true.  "},{"title":"DictionaryKeys​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#DictionaryKeys","content":"&lt;/&gt; Util.DictionaryKeys(dict: {[any]: any}) → {any} Takes a dictionary and returns its keys.  "},{"title":"MakeFuzzyFinder​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#MakeFuzzyFinder","content":"&lt;/&gt; Util.MakeFuzzyFinder(setOrContainer: any) → ( string, boolean? ) → string Returns a function that is a fuzzy finder for the specified set or container. Can pass an array of strings, array of instances, array of EnumItems, array of dictionaries with a Name key or an instance (in which case its children will be used). Exact matches will be inserted in the front of the resulting array.  "},{"title":"GetNames​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#GetNames","content":"&lt;/&gt; Util.GetNames(instances: any) → {string} Takes an array of instances (or anything with a Name property) and maps them into an array of their names. If no Name property is present, then tostring will be called instead.  "},{"title":"SplitStringSimple​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#SplitStringSimple","content":"&lt;/&gt; Util.SplitStringSimple( input: string, sep: string? ) → {string} Splits a string using a simple separator (no quote parsing)  "},{"title":"ParseEscapeSequences​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#ParseEscapeSequences","content":"&lt;/&gt; Util.ParseEscapeSequences(text: string) → string Parses escape sequences into their fully qualified characters  "},{"title":"EncodeEscapedOperator​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#EncodeEscapedOperator","content":"&lt;/&gt; Util.EncodeEscapedOperator( text: string, op: string ) → string No description.  "},{"title":"EncodeEscapedOperators​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#EncodeEscapedOperators","content":"&lt;/&gt; Util.EncodeEscapedOperators(text: string) → string No description.  "},{"title":"SplitString​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#SplitString","content":"&lt;/&gt; Util.SplitString( text: string, max: number ) → {string} Splits a string by space but taking into account quoted sequences which will be treated as a single argument.  "},{"title":"MashExcessArguments​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#MashExcessArguments","content":"&lt;/&gt; Util.MashExcessArguments( arguments: {string}, max: number ) → {string} Takes an array of arguments and a max value. Any indicies past the max value will be appended to the last valid argument.  "},{"title":"TrimString​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#TrimString","content":"&lt;/&gt; Util.TrimString(str: string) → string Trims whitespace from both sides of a string.  "},{"title":"GetTextSize​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#GetTextSize","content":"&lt;/&gt; Util.GetTextSize( text: string, label: TextLabel , size: Vector2? ) → Vector2  Returns the text bounds size based on given text, label (from which properties will be pulled), and optional Vector2 container size.  "},{"title":"MakeEnumType​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#MakeEnumType","content":"&lt;/&gt; Util.MakeEnumType( name: string, values: any ) → TypeDefinition Makes an Enum type.  "},{"title":"ParsePrefixedUnionType​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#ParsePrefixedUnionType","content":"&lt;/&gt; Util.ParsePrefixedUnionType( typeValue: string, rawValue: string ) → ( string?, string?, string? ) Parses a prefixed union type argument (such as %Team)  "},{"title":"MakeListableType​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#MakeListableType","content":"&lt;/&gt; Util.MakeListableType( type: TypeDefinition, override: table ) → TypeDefinition Creates a listable type from a singular type  "},{"title":"RunCommandString​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#RunCommandString","content":"&lt;/&gt; Util.RunCommandString( dispatcher: Dispatcher, commandString: string ) → string?-- output from Dispatcher:EvaluateAndRun as a string Creates a listable type from a singular type  "},{"title":"RunEmbeddedCommands​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#RunEmbeddedCommands","content":"&lt;/&gt; Util.RunEmbeddedCommands( dispatcher: Dispatcher, str: string ) → string Runs embedded commands and replaces them  "},{"title":"SubstituteArgs​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#SubstituteArgs","content":"&lt;/&gt; Util.SubstituteArgs( str: string, replace: string ) → string Replaces arguments in the format $1, $2, $something with whatever the given function returns for it.  "},{"title":"MakeAliasCommand​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#MakeAliasCommand","content":"&lt;/&gt; Util.MakeAliasCommand( name: string, commandString: string ) → CommandDefinition Creates an alias command  "},{"title":"MakeSequenceType​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#MakeSequenceType","content":"&lt;/&gt; Util.MakeSequenceType(options: { Parse: function?, Constructor: function?, TransformEach: function?, ValidateEach: function?, Prefixes: {string}?, Length: number? }) → ArgumentDefinition Makes a type that contains a sequence, e.g. Vector3 or Color3 For options, one of Constructor or Parse is required  "},{"title":"SplitPrioritizedDelimeter​","type":1,"pageTitle":"Util","url":"/Cmdr/alpha/api/Util#SplitPrioritizedDelimeter","content":"&lt;/&gt; Util.SplitPrioritizedDelimeter( text: string, delimiters: {string} ) → {string}? Splits a string by a single delimeter chosen from the given set. The first matching delimeter from the set becomes the split character. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/installation","content":"Installation","keywords":""},{"title":"Cmdr","type":0,"sectionRef":"#","url":"/Cmdr/alpha/api/Cmdr","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Cmdr","url":"/Cmdr/alpha/api/Cmdr#properties","content":" "},{"title":"Registry​","type":1,"pageTitle":"Cmdr","url":"/Cmdr/alpha/api/Cmdr#Registry","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Cmdr.Registry: Registry Refers to the current command Registry.  "},{"title":"Dispatcher​","type":1,"pageTitle":"Cmdr","url":"/Cmdr/alpha/api/Cmdr#Dispatcher","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Cmdr.Dispatcher: Dispatcher Refers to the current command Dispatcher.  "},{"title":"Util​","type":1,"pageTitle":"Cmdr","url":"/Cmdr/alpha/api/Cmdr#Util","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Cmdr.Util: Util Refers to a table containing many useful utility functions. "},{"title":"Hooks","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/hooks","content":"Hooks","keywords":""},{"title":"Types","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/types","content":"Types","keywords":""},{"title":"Contributing","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/community/contribute","content":"Contributing","keywords":""},{"title":"Network event handlers","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/networkeventhandlers","content":"Network event handlers","keywords":""},{"title":"Dispatcher","type":0,"sectionRef":"#","url":"/Cmdr/alpha/api/Dispatcher","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Dispatcher","url":"/Cmdr/alpha/api/Dispatcher#properties","content":" "},{"title":"Cmdr​","type":1,"pageTitle":"Dispatcher","url":"/Cmdr/alpha/api/Dispatcher#Cmdr","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Dispatcher.Cmdr: Cmdr | CmdrClient A reference to Cmdr. This may either be the server or client version of Cmdr depending on where the code is running.  "},{"title":"Registry​","type":1,"pageTitle":"Dispatcher","url":"/Cmdr/alpha/api/Dispatcher#Registry","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Dispatcher.Registry: Registry  "},{"title":"Functions​","type":1,"pageTitle":"Dispatcher","url":"/Cmdr/alpha/api/Dispatcher#functions","content":" "},{"title":"EvaluateAndRun​","type":1,"pageTitle":"Dispatcher","url":"/Cmdr/alpha/api/Dispatcher#EvaluateAndRun","content":"&lt;/&gt; Dispatcher:EvaluateAndRun( text: string, executor: Player? , options: { Data: any?, IsHuman: boolean?, }? ) → string-- Command output or error message Runs a command as the given player. Executor is optional when running on the client. If options.Data is given, it will be available on the server with CommandContext.GetData If options.IsHuman is true and this function is called on the client, then the text will be inserted into the window history.  "},{"title":"Run​","type":1,"pageTitle":"Dispatcher","url":"/Cmdr/alpha/api/Dispatcher#Run","content":"This item only works when running on the client. Client &lt;/&gt; Dispatcher:Run(...: string...) → string Invokes a command programmatically as the local player. Accepts a variable number of arguments, which are all joined with spaces before being run; the command should be the first argument. This function will raise an error if any validations occur, since it's only for hard-coded (or generated) commands.  "},{"title":"GetHistory​","type":1,"pageTitle":"Dispatcher","url":"/Cmdr/alpha/api/Dispatcher#GetHistory","content":"This item only works when running on the client. Client &lt;/&gt; Dispatcher:GetHistory() → {string} Returns an array of the user's command history. Most recent commands are inserted at the end of the array. "},{"title":"Meta-commands","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/metacommands","content":"Meta-commands","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/intro","content":"Introduction","keywords":""},{"title":"Set-up","type":0,"sectionRef":"#","url":"/Cmdr/alpha/docs/setup","content":"Set-up","keywords":""},{"title":"CmdrClient","type":0,"sectionRef":"#","url":"/Cmdr/alpha/api/CmdrClient","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#properties","content":" "},{"title":"Registry​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#Registry","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CmdrClient.Registry: Registry Refers to the current command Registry.  "},{"title":"Dispatcher​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#Dispatcher","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CmdrClient.Dispatcher: Dispatcher Refers to the current command Dispatcher.  "},{"title":"Util​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#Util","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CmdrClient.Util: Util Refers to a table containing many useful utility functions.  "},{"title":"Enabled​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#Enabled","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CmdrClient.Enabled: boolean TODO: Add description  "},{"title":"PlaceName​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#PlaceName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CmdrClient.PlaceName: string TODO: Add description  "},{"title":"ActivationKeys​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#ActivationKeys","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CmdrClient.ActivationKeys: {[Enum.KeyCode]=true} The list of key codes that will show or hide Cmdr. Use CmdrClient:SetActivationKeys to change. "},{"title":"Functions​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#functions","content":" "},{"title":"SetActivationKeys​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#SetActivationKeys","content":"&lt;/&gt; CmdrClient:SetActivationKeys(keys: {Enum.KeyCode}) → () Sets the key codes that will used to show or hide Cmdr.  "},{"title":"SetPlaceName​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#SetPlaceName","content":"&lt;/&gt; CmdrClient:SetPlaceName(name: string) → () Sets the place name label on the interface. This is useful for a quick way to tell what game you're playing in a universe game.  "},{"title":"SetEnabled​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#SetEnabled","content":"&lt;/&gt; CmdrClient:SetEnabled(enabled: boolean) → () Sets whether or not Cmdr can be shown via the defined activation keys. Useful for when you want users to opt-in to show the console, for instance in a settings menu.  "},{"title":"SetActivationUnlocksMouse​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#SetActivationUnlocksMouse","content":"&lt;/&gt; CmdrClient:SetActivationUnlocksMouse(enabled: boolean) → () Sets if activation will free the mouse.  "},{"title":"Show​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#Show","content":"&lt;/&gt; CmdrClient:Show() → () Shows the Cmdr window. Does nothing if Cmdr isn't enabled.  "},{"title":"Hide​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#Hide","content":"&lt;/&gt; CmdrClient:Hide() → () Hides the Cmdr window.  "},{"title":"Toggle​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#Toggle","content":"&lt;/&gt; CmdrClient:Toggle() → () Toggles the Cmdr window. Does nothing if Cmdr isn't enabled.  "},{"title":"SetMashToEnable​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#SetMashToEnable","content":"&lt;/&gt; CmdrClient:SetMashToEnable(enabled: boolean) → () Enables the &quot;Mash to open&quot; feature. TODO: Better description  "},{"title":"SetHideOnLostFocus​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#SetHideOnLostFocus","content":"&lt;/&gt; CmdrClient:SetHideOnLostFocus(enabled: boolean) → () Sets the hide on 'lost focus' feature. TODO: Better description  "},{"title":"HandleEvent​","type":1,"pageTitle":"CmdrClient","url":"/Cmdr/alpha/api/CmdrClient#HandleEvent","content":"&lt;/&gt; CmdrClient:HandleEvent( name: string, callback: (...any) → () ) → () Sets the handler for a certain event type TODO: Better description "},{"title":"Registry","type":0,"sectionRef":"#","url":"/Cmdr/alpha/api/Registry","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#types","content":" "},{"title":"HookType​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#HookType","content":"&lt;/&gt; type HookType = &quot;BeforeRun&quot; | &quot;AfterRun&quot;   "},{"title":"CommandDefinition​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#CommandDefinition","content":"&lt;/&gt; interface CommandDefinition { Placeholder: string } TODO:  "},{"title":"TypeDefinition​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#TypeDefinition","content":"&lt;/&gt; interface TypeDefinition { Placeholder: string } TODO: "},{"title":"Properties​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#properties","content":" "},{"title":"Cmdr​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#Cmdr","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Registry.Cmdr: Cmdr | CmdrClient A reference to Cmdr. This may either be the server or client version of Cmdr depending on where the code is running. "},{"title":"Functions​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#functions","content":" "},{"title":"RegisterType​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterType","content":"&lt;/&gt; Registry:RegisterType( name: string,-- The name of the type, this must be unique, alphanumeric, and start with a lower-case letter or digit. typeObject: TypeDefinition ) → () Registers a type on the current realm (server/client), this function should be called from within the type definition ModuleScript.  "},{"title":"RegisterTypePrefix​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterTypePrefix","content":"&lt;/&gt; Registry:RegisterTypePrefix( name: string,-- The name of the type. union: string-- The string should omit the initial type name, so this string should begin with a prefix character, e.g. # integer ! boolean ) → () Registers a Prefixed Union Type string on the current realm (server/client), this function should be called from within the type definition ModuleScript. If there are already type prefixes for the given type name, they will be concatenated. This allows you to add prefixes to default types, like players.  "},{"title":"RegisterTypeAlias​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterTypeAlias","content":"&lt;/&gt; Registry:RegisterTypeAlias( name: string,-- The name of the type, this must be unique, alphanumeric, and start with a lower-case letter or digit. alias: string-- The string should include the initial type name, e.g. string # integer ! boolean ) → () Allows you to register a name which will be expanded into a longer type which can be used as a command argument type. For example, if you register the alias stringOrNumber it could be interpreted as string # number when used.  "},{"title":"RegisterTypesIn​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterTypesIn","content":"This item only works when running on the server. Server &lt;/&gt; Registry:RegisterTypesIn(container: Instance ) → () Registers all types from within a container on both the server and client.  "},{"title":"RegisterHooksIn​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterHooksIn","content":"This item only works when running on the server. Server &lt;/&gt; Registry:RegisterHooksIn() → () Registers all hooks from within a container on both the server and client. If you want to add a hook only on the server or client – e.g. for logging – then you should use the Register.RegisterHook method instead.  "},{"title":"RegisterCommand​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterCommand","content":"This item only works when running on the server. Server &lt;/&gt; Registry:RegisterCommand( commandScript: ModuleScript , commandServerScript: ModuleScript? , filter: (CommandDefinition → boolean)?-- If present, will be passed a command definition which will then only be registered if the function returns true. ) → () Registers a command definition and its server equivalent. Handles replicating the definition to the client.  "},{"title":"RegisterCommandsIn​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterCommandsIn","content":"This item only works when running on the server. Server &lt;/&gt; Registry:RegisterCommandsIn( container: Instance , filter: ((CommandDefinition) → boolean)?-- If present, will be passed a command definition which will then only be registered if the function returns true. ) → () Registers all commands from within a container on both the server and client. Module scripts which include Server in their name will not be sent to the client.  "},{"title":"RegisterDefaultCommands​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterDefaultCommands","content":"This item only works when running on the server. Server &lt;/&gt; Registry:RegisterDefaultCommands(arrayOrFunc: {string} | (CommandDefinition) → boolean | nil) → () Registers the default commands on both the server and client. The optional arrayOrFunc parameter can be provided with: an array of strings — this will limit registration to only commands which have their Group property set to this a function which takes in a CommandDefinition and returns a boolean — only if true is returned will the command be registered  "},{"title":"GetCommand​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#GetCommand","content":"&lt;/&gt; Registry:GetCommand(name: string) → CommandDefinition? Returns the CommandDefinition from the given name, or nil if no command is found. Command aliases are also accepted.  "},{"title":"GetCommands​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#GetCommands","content":"&lt;/&gt; Registry:GetCommands() → {CommandDefinition} Returns an array of all registers commands, not including aliases.  "},{"title":"GetCommandNames​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#GetCommandNames","content":"&lt;/&gt; Registry:GetCommandNames() → {string} Returns an array of containing the names of all registered commands, not including aliases.  "},{"title":"GetTypeNames​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#GetTypeNames","content":"&lt;/&gt; Registry:GetTypeNames() → {string} Returns an array of containing the names of all registered types, not including aliases.  "},{"title":"GetType​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#GetType","content":"&lt;/&gt; Registry:GetType(name: string) → TypeDefinition? Returns the type definition from the given name, or nil if no argument is found.  "},{"title":"GetTypeName​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#GetTypeName","content":"&lt;/&gt; Registry:GetTypeName(name: string) → TypeDefinition | string Returns a type name taking aliases into account. If there is no alias, the name parameter is simply returned as a pass through.  "},{"title":"RegisterHook​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#RegisterHook","content":"&lt;/&gt; Registry:RegisterHook( hookName: HookType, callback: (CommandContext) → string?,-- returns nil for ok, string (errorText) for cancellation priority: number-- If unspecified, the priority will default to 0. ) → () Registers a hook on the current realm (server/client). This should probably be ran on the server or in a hook module script, but can also work on the client. Hooks run in order of priority from lowest (running first) to highest.  "},{"title":"GetStore​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#GetStore","content":"&lt;/&gt; Registry:GetStore(name: string) → table Returns a table saved with the given name. Always returns the same table on subsequent calls. Useful for commands that require persistent state, like bind or ban. This is the same as CommandContext.GetStore.  "},{"title":"GetCommandsAsStrings​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#GetCommandsAsStrings","content":"deprecated in v1.8.0 &lt;/&gt; This was deprecated in v1.8.0 This method was renamed to GetCommandNames in v1.8.0. The old name exists for backwards compatibility and should not be used for new work. Registry:GetCommandsAsStrings() → ()   "},{"title":"AddHook​","type":1,"pageTitle":"Registry","url":"/Cmdr/alpha/api/Registry#AddHook","content":"deprecated in v1.1.2 &lt;/&gt; This was deprecated in v1.1.2 This method was renamed to RegisterHook in v1.1.2. The old name exists for backwards compatibility and should not be used for new work. Registry:AddHook( hookName: HookType, callback: (CommandContext) → string?,-- returns nil for ok, string (errorText) for cancellation priority: number-- If unspecified, the priority will default to 0. ) → ()  "}]