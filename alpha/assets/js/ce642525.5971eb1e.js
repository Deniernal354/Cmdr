"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77],{91964:e=>{e.exports=JSON.parse('{"functions":[{"name":"RegisterType","desc":"Registers a type on the current realm (server/client), this function should be called from within the type definition ModuleScript.","params":[{"name":"name","desc":"The name of the type, this must be unique, alphanumeric, and start with a lower-case letter or digit.","lua_type":"string"},{"name":"typeObject","desc":"","lua_type":"TypeDefinition"}],"returns":[],"function_type":"method","source":{"line":159,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterTypePrefix","desc":"Registers a Prefixed Union Type string on the current realm (server/client), this function should be called from within the type definition ModuleScript.\\n\\nIf there are already type prefixes for the given type name, they will be concatenated. This allows you to add prefixes to default types, like `players`.","params":[{"name":"name","desc":"The name of the type.","lua_type":"string"},{"name":"union","desc":"The string should omit the initial type name, so this string should begin with a prefix character, e.g. `# integer ! boolean`","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":201,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterTypeAlias","desc":"Allows you to register a name which will be expanded into a longer type which can be used as a command argument type.\\nFor example, if you register the alias `stringOrNumber` it could be interpreted as `string # number` when used.","params":[{"name":"name","desc":"The name of the type, this must be unique, alphanumeric, and start with a lower-case letter or digit.","lua_type":"string"},{"name":"alias","desc":"The string should *include* the initial type name, e.g. `string # integer ! boolean`","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":217,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterTypesIn","desc":"Registers all types from within a container on both the server and client.","params":[{"name":"container","desc":"","lua_type":"Instance"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":228,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterHooksIn","desc":"Registers all hooks from within a container on both the server and client.\\nIf you want to add a hook only on the server or client \u2013 e.g. for logging \u2013 then you should use the Register.RegisterHook method instead.","params":[],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":249,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterCommandObject","desc":"Register a command purely based on its definition.\\nPrefer using Registry:RegisterCommand for proper handling of client/server model.","params":[{"name":"commandObject","desc":"","lua_type":"CommandDefinition"}],"returns":[],"function_type":"method","private":true,"source":{"line":259,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterCommand","desc":"Registers a command definition and its server equivalent. Handles replicating the definition to the client.","params":[{"name":"commandScript","desc":"","lua_type":"ModuleScript"},{"name":"commandServerScript","desc":"","lua_type":"ModuleScript?"},{"name":"filter","desc":"If present, will be passed a command definition which will then only be registered if the function returns `true`.","lua_type":"(CommandDefinition -> boolean)?"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":316,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterCommandsIn","desc":"Registers all commands from within a container on both the server and client.\\n\\nModule scripts which include `Server` in their name will not be sent to the client.","params":[{"name":"container","desc":"","lua_type":"Instance"},{"name":"filter","desc":"If present, will be passed a command definition which will then only be registered if the function returns `true`.","lua_type":"((CommandDefinition) -> boolean)?"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":351,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterDefaultCommands","desc":"Registers the default commands on both the server and client.\\n\\nThe optional `arrayOrFunc` parameter can be provided with:\\n\\n1. an array of strings \u2014 this will limit registration to only commands which have their `Group` property set to this\\n2. a function which takes in a CommandDefinition and returns a `boolean` \u2014 only if `true` is returned will the command be registered","params":[{"name":"arrayOrFunc","desc":"","lua_type":"{string} | (CommandDefinition) -> boolean | nil"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":397,"path":"Cmdr/Shared/Registry.lua"}},{"name":"GetCommand","desc":"Returns the CommandDefinition from the given name, or nil if no command is found. Command aliases are also accepted.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"CommandDefinition?"}],"function_type":"method","source":{"line":412,"path":"Cmdr/Shared/Registry.lua"}},{"name":"GetCommands","desc":"Returns an array of all registers commands, not including aliases.","params":[],"returns":[{"desc":"","lua_type":"{CommandDefinition}"}],"function_type":"method","source":{"line":422,"path":"Cmdr/Shared/Registry.lua"}},{"name":"GetCommandNames","desc":"Returns an array of containing the names of all registered commands, not including aliases.","params":[],"returns":[{"desc":"","lua_type":"{ string }\\r\\n"}],"function_type":"method","source":{"line":430,"path":"Cmdr/Shared/Registry.lua"}},{"name":"GetCommandsAsStrings","desc":"","params":[],"returns":[],"function_type":"method","deprecated":{"version":"v1.8.0","desc":"This method was renamed to GetCommandNames in v1.8.0. The old name exists for backwards compatibility and should not be used for new work."},"source":{"line":445,"path":"Cmdr/Shared/Registry.lua"}},{"name":"GetTypeNames","desc":"Returns an array of containing the names of all registered types, not including aliases.","params":[],"returns":[{"desc":"","lua_type":"{ string }\\r\\n"}],"function_type":"method","source":{"line":451,"path":"Cmdr/Shared/Registry.lua"}},{"name":"GetType","desc":"Returns the type definition from the given name, or nil if no argument is found.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"TypeDefinition?"}],"function_type":"method","source":{"line":466,"path":"Cmdr/Shared/Registry.lua"}},{"name":"GetTypeName","desc":"Returns a type name taking aliases into account. If there is no alias, the name parameter is simply returned as a pass through.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"TypeDefinition | string"}],"function_type":"method","source":{"line":475,"path":"Cmdr/Shared/Registry.lua"}},{"name":"RegisterHook","desc":"Registers a hook on the current realm (server/client). This should probably be ran on the server or in a hook module script, but can also work on the client.\\n\\nHooks run in order of priority from lowest (running first) to highest.","params":[{"name":"hookName","desc":"","lua_type":"HookType"},{"name":"callback","desc":"returns nil for ok, string (errorText) for cancellation","lua_type":"(CommandContext) -> string?"},{"name":"priority","desc":"If unspecified, the priority will default to `0`.","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":489,"path":"Cmdr/Shared/Registry.lua"}},{"name":"AddHook","desc":"","params":[{"name":"hookName","desc":"","lua_type":"HookType"},{"name":"callback","desc":"returns nil for ok, string (errorText) for cancellation","lua_type":"(CommandContext) -> string?"},{"name":"priority","desc":"If unspecified, the priority will default to `0`.","lua_type":"number"}],"returns":[],"function_type":"method","deprecated":{"version":"v1.1.2","desc":"This method was renamed to RegisterHook in v1.1.2. The old name exists for backwards compatibility and should not be used for new work."},"source":{"line":508,"path":"Cmdr/Shared/Registry.lua"}},{"name":"GetStore","desc":"Returns a table saved with the given name. Always returns the same table on subsequent calls. Useful for commands that require persistent state, like bind or ban.\\nThis is the same as CommandContext.GetStore.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","source":{"line":516,"path":"Cmdr/Shared/Registry.lua"}},{"name":"FlushAutoExecBufferDeferred","desc":"Calls Registry.FlushAutoExecBuffer at the end of the frame.","params":[],"returns":[],"function_type":"method","private":true,"source":{"line":525,"path":"Cmdr/Shared/Registry.lua"}},{"name":"FlushAutoExecBuffer","desc":"Runs all pending auto exec commands in Registry.AutoExecBuffer.","params":[],"returns":[],"function_type":"method","private":true,"source":{"line":542,"path":"Cmdr/Shared/Registry.lua"}}],"properties":[{"name":"TypeMethods","desc":"","lua_type":"{ [string]: true }","private":true,"readonly":true,"source":{"line":38,"path":"Cmdr/Shared/Registry.lua"}},{"name":"CommandMethods","desc":"","lua_type":"{ [string]: true }","private":true,"readonly":true,"source":{"line":45,"path":"Cmdr/Shared/Registry.lua"}},{"name":"CommandArgProps","desc":"","lua_type":"{ [string]: true }","private":true,"readonly":true,"source":{"line":52,"path":"Cmdr/Shared/Registry.lua"}},{"name":"Types","desc":"","lua_type":"table","private":true,"readonly":true,"source":{"line":59,"path":"Cmdr/Shared/Registry.lua"}},{"name":"TypeAliases","desc":"","lua_type":"table","private":true,"readonly":true,"source":{"line":66,"path":"Cmdr/Shared/Registry.lua"}},{"name":"Commands","desc":"","lua_type":"table","private":true,"readonly":true,"source":{"line":73,"path":"Cmdr/Shared/Registry.lua"}},{"name":"CommandsArray","desc":"","lua_type":"table","private":true,"readonly":true,"source":{"line":80,"path":"Cmdr/Shared/Registry.lua"}},{"name":"Cmdr","desc":"A reference to Cmdr. This may either be the server or client version of Cmdr depending on where the code is running.","lua_type":"Cmdr | CmdrClient","readonly":true,"source":{"line":87,"path":"Cmdr/Shared/Registry.lua"}},{"name":"Hooks","desc":"","lua_type":"{ [HookType]: table }","private":true,"readonly":true,"source":{"line":94,"path":"Cmdr/Shared/Registry.lua"}},{"name":"Stores","desc":"","lua_type":"table","private":true,"readonly":true,"source":{"line":101,"path":"Cmdr/Shared/Registry.lua"}},{"name":"AutoExecBuffer","desc":"","lua_type":"table","private":true,"readonly":true,"source":{"line":108,"path":"Cmdr/Shared/Registry.lua"}}],"types":[{"name":"HookType","desc":"","lua_type":"\\"BeforeRun\\" | \\"AfterRun\\"","source":{"line":15,"path":"Cmdr/Shared/Registry.lua"}},{"name":"CommandDefinition","desc":"TODO:","fields":[{"name":"Placeholder","lua_type":"string","desc":""}],"source":{"line":23,"path":"Cmdr/Shared/Registry.lua"}},{"name":"TypeDefinition","desc":"TODO:","fields":[{"name":"Placeholder","lua_type":"string","desc":""}],"source":{"line":31,"path":"Cmdr/Shared/Registry.lua"}}],"name":"Registry","desc":"The registry keeps track of all the commands and types that Cmdr knows about.","source":{"line":10,"path":"Cmdr/Shared/Registry.lua"}}')}}]);